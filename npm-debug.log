0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install' ]
2 info using npm@1.3.21
3 info using node@v0.10.24
4 verbose readDependencies using package.json deps
5 verbose install where, deps [ '/Volumes/MacintoshHD2/dev/node/rabbit',
5 verbose install   [ 'express',
5 verbose install     'ejs',
5 verbose install     'stylus',
5 verbose install     'feedparser',
5 verbose install     'collections',
5 verbose install     'java',
5 verbose install     'jmx' ] ]
6 info preinstall application-name@0.0.1
7 verbose readDependencies using package.json deps
8 verbose already installed skipping stylus@* /Volumes/MacintoshHD2/dev/node/rabbit
9 verbose already installed skipping express@3.4.7 /Volumes/MacintoshHD2/dev/node/rabbit
10 verbose already installed skipping ejs@* /Volumes/MacintoshHD2/dev/node/rabbit
11 verbose already installed skipping feedparser@0.16.5 /Volumes/MacintoshHD2/dev/node/rabbit
12 verbose already installed skipping collections@0.2.2 /Volumes/MacintoshHD2/dev/node/rabbit
13 verbose cache add [ 'java@0.3.0', null ]
14 verbose cache add name=undefined spec="java@0.3.0" args=["java@0.3.0",null]
15 verbose parsed url { protocol: null,
15 verbose parsed url   slashes: null,
15 verbose parsed url   auth: null,
15 verbose parsed url   host: null,
15 verbose parsed url   port: null,
15 verbose parsed url   hostname: null,
15 verbose parsed url   hash: null,
15 verbose parsed url   search: null,
15 verbose parsed url   query: null,
15 verbose parsed url   pathname: 'java@0.3.0',
15 verbose parsed url   path: 'java@0.3.0',
15 verbose parsed url   href: 'java@0.3.0' }
16 verbose cache add name="java" spec="0.3.0" args=["java","0.3.0"]
17 verbose parsed url { protocol: null,
17 verbose parsed url   slashes: null,
17 verbose parsed url   auth: null,
17 verbose parsed url   host: null,
17 verbose parsed url   port: null,
17 verbose parsed url   hostname: null,
17 verbose parsed url   hash: null,
17 verbose parsed url   search: null,
17 verbose parsed url   query: null,
17 verbose parsed url   pathname: '0.3.0',
17 verbose parsed url   path: '0.3.0',
17 verbose parsed url   href: '0.3.0' }
18 verbose addNamed [ 'java', '0.3.0' ]
19 verbose addNamed [ '0.3.0', '0.3.0' ]
20 verbose cache add [ 'jmx@0.2.1', null ]
21 verbose cache add name=undefined spec="jmx@0.2.1" args=["jmx@0.2.1",null]
22 verbose parsed url { protocol: null,
22 verbose parsed url   slashes: null,
22 verbose parsed url   auth: null,
22 verbose parsed url   host: null,
22 verbose parsed url   port: null,
22 verbose parsed url   hostname: null,
22 verbose parsed url   hash: null,
22 verbose parsed url   search: null,
22 verbose parsed url   query: null,
22 verbose parsed url   pathname: 'jmx@0.2.1',
22 verbose parsed url   path: 'jmx@0.2.1',
22 verbose parsed url   href: 'jmx@0.2.1' }
23 verbose cache add name="jmx" spec="0.2.1" args=["jmx","0.2.1"]
24 verbose parsed url { protocol: null,
24 verbose parsed url   slashes: null,
24 verbose parsed url   auth: null,
24 verbose parsed url   host: null,
24 verbose parsed url   port: null,
24 verbose parsed url   hostname: null,
24 verbose parsed url   hash: null,
24 verbose parsed url   search: null,
24 verbose parsed url   query: null,
24 verbose parsed url   pathname: '0.2.1',
24 verbose parsed url   path: '0.2.1',
24 verbose parsed url   href: '0.2.1' }
25 verbose addNamed [ 'jmx', '0.2.1' ]
26 verbose addNamed [ '0.2.1', '0.2.1' ]
27 silly lockFile e989c7d9-java-0-3-0 java@0.3.0
28 verbose lock java@0.3.0 /Users/pfreitas/.npm/e989c7d9-java-0-3-0.lock
29 silly lockFile 33d64988-jmx-0-2-1 jmx@0.2.1
30 verbose lock jmx@0.2.1 /Users/pfreitas/.npm/33d64988-jmx-0-2-1.lock
31 verbose url raw java/0.3.0
32 verbose url resolving [ 'https://registry.npmjs.org/', './java/0.3.0' ]
33 verbose url resolved https://registry.npmjs.org/java/0.3.0
34 info trying registry request attempt 1 at 20:56:52
35 verbose etag "8W9YZA0D8H6CTZICGMNOGLTCB"
36 http GET https://registry.npmjs.org/java/0.3.0
37 verbose url raw jmx/0.2.1
38 verbose url resolving [ 'https://registry.npmjs.org/', './jmx/0.2.1' ]
39 verbose url resolved https://registry.npmjs.org/jmx/0.2.1
40 info trying registry request attempt 1 at 20:56:52
41 verbose etag "7MEPY2A2PY5E9ES7H1429WDL3"
42 http GET https://registry.npmjs.org/jmx/0.2.1
43 http 304 https://registry.npmjs.org/java/0.3.0
44 silly registry.get cb [ 304,
44 silly registry.get   { date: 'Thu, 06 Feb 2014 22:56:51 GMT',
44 silly registry.get     server: 'Apache',
44 silly registry.get     connection: 'Keep-Alive',
44 silly registry.get     'keep-alive': 'timeout=10, max=50',
44 silly registry.get     etag: '"8W9YZA0D8H6CTZICGMNOGLTCB"',
44 silly registry.get     'cache-control': 'max-age=1',
44 silly registry.get     vary: 'Accept' } ]
45 verbose etag java/0.3.0 from cache
46 silly lockFile e989c7d9-java-0-3-0 java@0.3.0
47 silly lockFile e989c7d9-java-0-3-0 java@0.3.0
48 http 304 https://registry.npmjs.org/jmx/0.2.1
49 silly registry.get cb [ 304,
49 silly registry.get   { date: 'Thu, 06 Feb 2014 22:56:51 GMT',
49 silly registry.get     server: 'Apache',
49 silly registry.get     connection: 'Keep-Alive',
49 silly registry.get     'keep-alive': 'timeout=10, max=50',
49 silly registry.get     etag: '"7MEPY2A2PY5E9ES7H1429WDL3"',
49 silly registry.get     'cache-control': 'max-age=1',
49 silly registry.get     vary: 'Accept' } ]
50 verbose etag jmx/0.2.1 from cache
51 silly lockFile 33d64988-jmx-0-2-1 jmx@0.2.1
52 silly lockFile 33d64988-jmx-0-2-1 jmx@0.2.1
53 silly resolved [ { name: 'java',
53 silly resolved     description: 'Bridge API to connect with existing Java APIs.',
53 silly resolved     author: { name: 'Joe Ferner', email: 'joe@fernsroth.com' },
53 silly resolved     keywords: [ 'java', 'jvm', 'bridge' ],
53 silly resolved     version: '0.3.0',
53 silly resolved     engines: { node: '>=0.6.0' },
53 silly resolved     maintainers: [ [Object] ],
53 silly resolved     bugs: { url: 'https://github.com/joeferner/node-java/issues' },
53 silly resolved     license: 'MIT',
53 silly resolved     repository:
53 silly resolved      { type: 'git',
53 silly resolved        url: 'https://github.com/joeferner/node-java.git' },
53 silly resolved     dependencies: { 'find-java-home': '0.0.3' },
53 silly resolved     devDependencies: { nodeunit: '~0.6.4', memwatch: '~0.2.0', async: '~0.1.22' },
53 silly resolved     scripts: { test: 'nodeunit test', install: 'node-gyp rebuild' },
53 silly resolved     main: './index.js',
53 silly resolved     gypfile: true,
53 silly resolved     readme: '# java\n\nBridge API to connect with existing Java APIs.\n\n[Google Groups Discussion Forum](https://groups.google.com/forum/#!forum/node-java)\n\n## Installation Linux/Windows\n\n```bash\n$ export JAVA_HOME=/usr/local/share/jdk1.6.0_30\n$ npm install java\n```\n\nNotes:\n* node-gyp requires python 2.x not python 3.x. See https://github.com/TooTallNate/node-gyp/issues/155 for more details.\n* If you see an error such as "No rule to make target \'/opt/jdk1.7.0_09/jre/lib/amd64/server/libjvm.so\', needed by \'build/depsVerified\'.  Stop."\n      this means that your JAVA_HOME is not set correctly and you need to verify the location of libjvm.so or jvm.lib.\n* If you see an error such as "Error: The specified module could not be found. \n      xxxxxx\\node_modules\\java\\build\\Release\\nodejavabridge_bindings.node".\n      Ensure the directory where jvm.dll exists is in your PATH. (e.g. C:\\Program Files (x86)\\Java\\jdk1.6.0_18\\jre\\bin\\client).\n      This path cannot have quotes.\n* If you see an error such as "Call to \'node findJavaHome.js\' returned exit status 1"\n      Try running `node findJavaHome.js` in the node-java directory to see the full failure message.\n\n\n## Installation Mac\n\n```bash\n$ npm install java\n```\n\n_Mavericks Users: If you are having problems finding \'jni.h\' please see [Issue #86](https://github.com/nearinfinity/node-java/issues/86)_\n\n## Installation ARM (Raspberry Pi)\n\n```bash\nGYP_DEFINES="armv7=0" CCFLAGS=\'-march=armv6\' CXXFLAGS=\'-march=armv6\' npm install java\n```\n\n## Manual compile (Using node-gyp)\n\n```bash\n./compile-java-code.sh\nnode-gyp configure build\nnpm test\n```\n\n_NOTE: You will need node-gyp installed using "npm install -g node-gyp"_\n\n## Quick Examples\n\n```javascript\nvar java = require("java");\njava.classpath.push("commons-lang3-3.1.jar");\njava.classpath.push("commons-io.jar");\n\nvar list = java.newInstanceSync("java.util.ArrayList");\n\njava.newInstance("java.util.ArrayList", function(err, list) {\n  list.addSync("item1");\n  list.addSync("item2");\n});\n\nvar ArrayList = java.import(\'java.util.ArrayList\');\nvar list = new ArrayList();\nlist.addSync(\'item1\');\n```\n\n### Create a char array\n\n```javascript\nvar charArray = java.newArray("char", "hello world\\n".split(\'\'));\n```\n\n### Create a byte array\n\n```javascript\nvar byteArray = java.newArray(\n  "byte",\n  "hello world\\n"\n    .split(\'\')\n    .map(function(c) { return java.newByte(str.charCodeAt(c)); });\n```\n\n### Using java.lang.Long and long\n\nJavaScript only supports 32-bit integers. Because of this java longs must be treated specially.\nWhen getting a long result the value may be truncated. If you need the original value there is\na property off of the result called "longValue" which contains the un-truncated value as a string.\nIf you are calling a method that takes a long you must create it using [java.newInstance](#javaNewInstance).\n\n```javascript\nvar javaLong = java.newInstanceSync("java.lang.Long", 5);\nconsole.log(\'Possibly truncated long value: \' + javaLong);\nconsole.log(\'Original long value (as a string): \' + javaLong.longValue);\njava.callStaticMethodSync("Test", "staticMethodThatTakesALong", javaLong);\n```\n\n### Exceptions\n\nExceptions from calling methods either caught using JavaScript try/catch block or passed\nto a callback as the first parameter may have a property named "cause" which has a reference\nto the Java Exception object which caused the error.\n\n```javascript\ntry {\n  java.methodThatThrowsExceptionSync();\n} catch(ex) {\n  console.log(ex.cause.getMessageSync());\n}\n```\n\n# Release Notes\n\n### v0.2.0\n\n* java.lang.Long and long primitives are handled better. See\n  \\([Issue #37](https://github.com/nearinfinity/node-java/issues/37)\\) and\n  \\([Issue #40](https://github.com/nearinfinity/node-java/issues/40)\\).\n\n# Index\n\n## java\n * [classpath](#javaClasspath)\n * [options](#javaOptions)\n * [import](#javaImport)\n * [newInstance](#javaNewInstance)\n * [instanceOf](#javaInstanceOf)\n * [callStaticMethod](#javaCallStaticMethod)\n * [getStaticFieldValue](#javaGetStaticFieldValue)\n * [setStaticFieldValue](#javaSetStaticFieldValue)\n * [newArray](#javaNewArray)\n * [newByte](#javaNewByte)\n * [newShort](#javaNewShort)\n * [newLong](#javaNewLong)\n * [newChar](#javaNewChar)\n * [newDouble](#javaNewDouble)\n * [newFloat](#javaNewFloat)\n * [newProxy](#javaNewProxy)\n\n## java objects\n * [Call Method](#javaObjectCallMethod)\n * [Get/Set Field](#javaObjectGetSetField)\n\n# API Documentation\n\n<a name="java"/>\n## java\n\n<a name="javaClasspath" />\n**java.classpath**\n\nArray of paths or jars to pass to the creation of the JVM.\n\nAll items must be added to the classpath before calling any other node-java methods.\n\n__Example__\n\n    java.classpath.push(\'commons.io.jar\');\n\n<a name="javaOptions" />\n**java.options**\n\nArray of options to pass to the creation of the JVM.\n\nAll items must be added to the options before calling any other node-java methods.\n\n__Example__\n\n    java.options.push(\'-Djava.awt.headless=true\');\n    java.options.push(\'-Xmx1024m\');\n\n<a name="javaImport" />\n**java.import(className)**\n\nLoads the class given by className such that it acts and feels like a javascript object.\n\n__Arguments__\n\n * className - The name of the class to create. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n\n__Example__\n\n    var Test = java.import(\'Test\');\n    Test.someStaticMethodSync(5);\n    console.log(Test.someStaticField);\n\n    var test = new Test();\n    list.instanceMethodSync(\'item1\');\n\n<a name="javaNewInstance" />\n**java.newInstance(className, [args...], callback)**\n\n**java.newInstanceSync(className, [args...]) : result**\n\nCreates an instance of the specified class. If you are using the sync method an exception will be throw if an error occures,\notherwise it will be the first argument in the callback.\n\n__Arguments__\n\n * className - The name of the class to create. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * callback(err, item) - Callback to be called when the class is created.\n\n__Example__\n\n    var list = java.newInstanceSync("java.util.ArrayList");\n\n    java.newInstance("java.util.ArrayList", function(err, list) {\n      if(err) { console.error(err); return; }\n      // new list\n    });\n\n<a name="javaInstanceOf" />\n**java.instanceOf(javaObject, className)**\n\nDetermines of a javaObject is an instance of a class.\n\n__Arguments__\n\n * javaObject - Instance of a java object returned from a method or from newInstance.\n * className - A string class name.\n\n__Example__\n\n    var obj = java.newInstanceSync("my.package.SubClass");\n\n    if(java.instanceOf(obj, "my.package.SuperClass")) {\n      console.log("obj is an instance of SuperClass");\n    }\n\n<a name="javaCallStaticMethod" />\n**java.callStaticMethod(className, methodName, [args...], callback)**\n\n**java.callStaticMethodSync(className, methodName, [args...]) : result**\n\nCalls a static method on the specified class. If you are using the sync method an exception will be throw if an error occures,\notherwise it will be the first argument in the callback.\n\n__Arguments__\n\n * className - The name of the class to call the method on. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * methodName - The name of the method to call.\n * callback(err, item) - Callback to be called when the class is created.\n\n__Example__\n\n    var result = java.callStaticMethodSync("com.nearinfinty.MyClass", "doSomething", 42, "test");\n\n    java.callStaticMethod("com.nearinfinty.MyClass", "doSomething", 42, "test", function(err, results) {\n      if(err) { console.error(err); return; }\n      // results from doSomething\n    });\n\n<a name="javaGetStaticFieldValue" />\n**java.getStaticFieldValue(className, fieldName)**\n\nGets a static field value from the specified class.\n\n__Arguments__\n\n * className - The name of the class to get the value from. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * fieldName - The name of the field to get the value from.\n\n__Example__\n\n    var data = java.getStaticFieldValue("com.nearinfinty.MyClass", "data");\n\n<a name="javaSetStaticFieldValue" />\n**java.setStaticFieldValue(className, fieldName, newValue)**\n\nSets a static field value on the specified class.\n\n__Arguments__\n\n * className - The name of the class to set the value on. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * fieldName - The name of the field to set the value on.\n * newValue - The new value to assign to the field.\n\n__Example__\n\n    java.getStaticFieldValue("com.nearinfinty.MyClass", "data", "Hello World");\n\n<a name="javaNewArray" />\n**java.newArray(className, values[])**\n\nCreates a new java array of type class.\n\n__Arguments__\n\n * className - The name of the type of array elements. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * values - A javascript array of values to assign to the java array.\n\n__Example__\n\n    var newArray = java.newArray("java.lang.String", ["item1", "item2", "item3"]);\n\n<a name="javaNewByte" />\n**java.newByte(val)**\n\nCreates a new java byte. This is needed because javascript does not have the concept of a byte.\n\n__Arguments__\n\n * val - The value of the java byte.\n\n__Example__\n\n    var b = java.newByte(12);\n\n<a name="javaNewShort" />\n**java.newShort(val)**\n\nCreates a new java short. This is needed because javascript does not have the concept of a short.\n\n__Arguments__\n\n * val - The value of the java short.\n\n__Example__\n\n    var s = java.newShort(12);\n\n<a name="javaNewLong" />\n**java.newLong(val)**\n\nCreates a new java long. This is needed because javascript does not have the concept of a long.\n\n__Arguments__\n\n * val - The value of the java long.\n\n__Example__\n\n    var s = java.newLong(12);\n\n<a name="javaNewChar" />\n**java.newChar(val)**\n\nCreates a new java char. This is needed because javascript does not have the concept of a char.\n\n__Arguments__\n\n * val - The value of the java char.\n\n__Example__\n\n    var ch = java.newChar(\'a\');\n\n<a name="javaNewDouble" />\n**java.newDouble(val)**\n\nCreates a new java double. This is needed to force javascript\'s number to a double to call some methods.\n\n__Arguments__\n\n * val - The value of the java double.\n\n__Example__\n\n    var d = java.newDouble(3.14);\n\n<a name="javaNewFloat" />\n**java.newFloat(val)**\n\nCreates a new java float. This is needed to force javascript\'s number to a float to call some methods.\n\n__Arguments__\n\n * val - The value of the java float.\n\n__Example__\n\n    var f = java.newFloat(3.14);\n\n<a name="javaNewProxy" />\n**java.newProxy(interfaceName, functions)**\n\nCreates a new java Proxy for the given interface. Functions passed in will run on the v8 main thread and not a new thread.\n\nThe returned object has two methods ref() and unref() which you can use to maintain references to prevent premature\ngarbage collection. You must call these methods to ensure the proxy stays around.\n\n__Arguments__\n\n * interfaceName - The name of the interface to proxy. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * functions - A hash of functions matching the function in the interface.\n\n__Example__\n\n    var myProxy = java.newProxy(\'java.lang.Runnable\', {\n      run: function () {\n        // This is actually run on the v8 thread and not the new java thread\n        console.log("hello from thread");\n      }\n    });\n\n    var thread = java.newInstanceSync("java.lang.Thread", myProxy);\n    thread.start();\n\n<a name="javaObject"/>\n## java object\n\n<a name="javaObjectCallMethod" />\n**obj._methodName_([args...], callback)**\n\n**obj._methodNameSync_([args...]) : result**\n\nOnce you have a java object either by creating a new instance or as a result of a method call you can then call methods on that object.\nAll public, non-static methods are exposed in synchronous and asynchronous flavors.\n\n__Arguments__\n\n * args - The arguments to pass to the method.\n * callback(err, item) - Callback to be called when the method has completed.\n\n__Example__\n\n    var list = java.newInstanceSync("java.util.ArrayList");\n    list.addSync("item1");\n    list.add("item2", function(err, result) {\n      if(err) { console.error(err); return; }\n    });\n\n<a name="javaObjectGetSetField" />\n**obj._fieldName_ = val**\n\n**val = obj._fieldName_**\n\nOnce you have a java object either by creating a new instance or as a result of a method call you can get instance\nfield values.\n\n__Example__\n\n    var list = java.newInstanceSync("com.nearinfinty.MyClass");\n    list.data = "test";\n    var data = list.data;\n\n# Signal Handling\n\nThe JVM intercepts signals (Ctrl+C, etc.) before node/v8 gets to handle them. To fix this there are a couple options.\n\n## Signal Handling Option 1\n\nOne option to capture these events is to add the following.\n\n```\njava.options.push(\'-Xrs\');\n```\n\n## Signal Handling Option 2\n\nHook into the runtime shutdown hook.\n\nFirst create a java wrapper around the Runtime.addShutdownHook method to allow using a proxy object.\n\n```java\npublic class ShutdownHookHelper {\n  public static void setShutdownHook(final Runnable r) {\n    Runtime.getRuntime().addShutdownHook(new Thread() {\n      @Override\n      public void run() {\n        r.run();\n      }\n    });\n  }\n}\n```\n\nCompile ShutdownHookHelper and then use it as follows.\n\n```javascript\nvar java = require(\'./\');\njava.classpath.push(\'.\');\nvar ShutdownHookHelper = java.import(\'ShutdownHookHelper\');\n\nShutdownHookHelper.setShutdownHookSync(java.newProxy(\'java.lang.Runnable\', {\n  run: function () {\n    console.log("do shutdown stuff here instead.");\n  }\n}));\n```\n\n# Object lifetime\n\nWhen you call a Java method through node-java, any arguments (V8/JavaScript objects) will be converted to Java objects  on the v8 main thread via a call to v8ToJava (found in utils.cpp). The JavaScript object is not held on to and can be garbage collected by v8. If this is an async call, the reference count on the Java objects will be incremented. The Java method will be invoked in a node.js async thread (see uv_queue_work). When the method returns, the resulting object will be returned to the main v8 thread and converted to JavaScript objects via a call to javaToV8 and the Java object\'s reference count will then be decremented to allow for garbage collection. The resulting v8 object will then be returned to the callers callback function.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
53 silly resolved     readmeFilename: 'README.md',
53 silly resolved     homepage: 'https://github.com/joeferner/node-java',
53 silly resolved     _id: 'java@0.3.0',
53 silly resolved     _from: 'java@0.3.0' },
53 silly resolved   { name: 'jmx',
53 silly resolved     version: '0.2.1',
53 silly resolved     description: 'Bridge library to communicate with java applications through JMX.',
53 silly resolved     homepage: 'http://onddo.github.io/node-jmx',
53 silly resolved     bugs: { url: 'https://github.com/onddo/node-jmx/issues' },
53 silly resolved     main: 'index.js',
53 silly resolved     scripts: { test: 'make test' },
53 silly resolved     repository: { type: 'git', url: 'https://github.com/onddo/node-jmx.git' },
53 silly resolved     keywords: [ 'jmx', 'java', 'jvm', 'bridge' ],
53 silly resolved     author:
53 silly resolved      { name: 'Xabier de Zuazo',
53 silly resolved        email: 'xabier@onddo.com',
53 silly resolved        url: 'https://github.com/zuazo' },
53 silly resolved     licenses: [ [Object] ],
53 silly resolved     readmeFilename: 'README.md',
53 silly resolved     engines: { node: '>=0.6.0' },
53 silly resolved     dependencies: { async: '~0.2.8', java: '~0.2.1' },
53 silly resolved     devDependencies:
53 silly resolved      { mocha: '~1.9.0',
53 silly resolved        jscoverage: '~0.3.7',
53 silly resolved        'mocha-lcov-reporter': '0.0.1',
53 silly resolved        coveralls: '2.0.7' },
53 silly resolved     readme: '# node-jmx\n\nnode.js bridge library to communicate with java applications through JMX.\n\n[![NPM version](https://badge.fury.io/js/jmx.png)](http://badge.fury.io/js/jmx)\n[![Build Status](https://travis-ci.org/onddo/node-jmx.png)](https://travis-ci.org/onddo/node-jmx)\n[![Coverage Status](https://coveralls.io/repos/onddo/node-jmx/badge.png?branch=master)](https://coveralls.io/r/onddo/node-jmx?branch=master)\n\n## Requirements\n\n* Tested with node `>= 0.8`.\n* Java version 6 or higher.\n* `node-java`: See [its installation instructions](https://github.com/nearinfinity/node-java/blob/master/README.md#installation-linuxwindows).\n\n## Installation\n\nBefore the installation, you must set your `JAVA_HOME` environment variable to point to the java JRE installation directory. For example:\n\n```bash\n$ export JAVA_HOME=/usr/lib/jvm/default-java\n$ npm install jmx\n```\n\n## Usage examples\n\n```js\nvar jmx = require("jmx");\n\nclient = jmx.createClient({\n  host: "localhost", // optional\n  port: 3000\n});\n\nclient.connect();\nclient.on("connect", function() {\n\n  client.getAttribute("java.lang:type=Memory", "HeapMemoryUsage", function(data) {\n    var used = data.getSync(\'used\');\n    console.log("HeapMemoryUsage used: " + used.longValue);\n    // console.log(data.toString());\n  });\n\n  client.setAttribute("java.lang:type=Memory", "Verbose", true, function() {\n    console.log("Memory verbose on"); // callback is optional\n  });\n\n  client.invoke("java.lang:type=Memory", "gc", [], function(data) {\n    console.log("gc() done");\n  });\n\n});\n```\n\n```js\nclient = jmx.createClient({\n  service: "service:jmx:rmi:///jndi/rmi://localhost:3000/jmxrmi"\n});\n```\nYou can check the [node-java documentation](https://github.com/nearinfinity/node-java/blob/master/README.md#quick-examples) to learn how to work with java objects in node.js.\n\n## Documentation\n\n### jmx.createClient(options)\n\nReturns a `Client` object.\n\n#### options\n\n`options` is a hash table with the following values:\n\n* `service` - The full service URL string, with *host*, *port*, *protocol* and *urlPath* included. For example `"service:jmx:rmi:///jndi/rmi://localhost:3000/jmxrmi"`.\n* `host` - Hostname to connect to (defaults to `"localhost"`).\n* `port` - JMX port number to connect to.\n* `protocol` - Protocol to use (defaults to `"rmi"`).\n* `urlPath` - JMX URL Path (defaults to `"/jndi/{protocol}://{host}:{port}/jmx{protocol}"`).\n* `username` - JMX authentication username.\n* `password` - JMX authentication password.\n\n### Client.connect()\n\nConnects to the JMX server. Emits `connect` event when done.\n\n### Client.disconnect()\n\nDisconnects from the JMX server. Emits `disconnect` event when done.\n\n### Client.getAttribute(mbean, attribute, callback)\n\nReturns an attribute from a MBean.\n\n* `mbean` - MBean query address as string. For example "java.lang:type=Memory".\n* `attribute` - Attribute name as string.\n* `callback(attrValue)`\n\n### Client.getDefaultDomain(callback)\n\nReturns the default domain as string.\n\n* `callback(domainName)`\n\n### Client.getDomains(callback)\n\nReturns an array of domain names.\n\n* `callback(domainsArray)`\n\n### Client.getMBeanCount(callback)\n\nReturns total the number of MBeans.\n\n* `callback(mbeanCount)`\n\n### Client.invoke(mbean, methodName, params, [signature,] [callback])\n\nInvokes a MBean operation.\n\n* `mbean` - The MBean query address as string. For example `"java.lang:type=Memory"`.\n* `methodName` - The method name as string.\n* `params` - The parameters to pass to the operation as array. For example `[ 1, 5, "param3" ]`.\n* `signature` (optional) - An array with the signature of the *params*. Sometimes may be necessary to use this if class names are not correctly detected (gives a *NoSuchMethodException*). For example `[ "int", "java.lang.Integer", "java.lang.String" ]`.\n* `callback(returnedValue)`\n\n### Client.listMBeans(callback)\n\nLists server MBeans. Callback returns an array of strings containing MBean names.\n\n### Client.on(event, callback)\n\nAdds a listener for the especified event.\n\n#### events\n\n* `connect`\n* `disconnect`\n* `error` - Passes the error as first parameter to the callback function.\n\n### Client.setAttribute(mbean, attribute, value, [className,] [callback])\n\nChanges an attribute value of the MBean.\n\n* `mbean` - The MBean query address as string. For example `"java.lang:type=Memory"`.\n* `attribute` - The attribute name as string.\n* `value` - The attribute value.\n* `className` (optional) - The attribute java className. Sometimes may be necessary to use this if value type is not correctly detected (gives a *InvalidAttributeValueException*). For example `"java.lang.Long".\n* `callback()` (optional)\n\n## Error handling\n\nErrors are **not printed** to the console by default. You can catch them with something like the following:\n\n```js\nclient.on("error", function(err) {\n  // ...\n});\n```\n\n## Testing\n\n```bash\n$ make test\n```\n\nYou will need to set the `JAVA_HOME` environment variable if the java binary is not in your *PATH*.\n\n### Coverage\n\n```bash\n$ make test-cov\n```\n\nThe HTML output file will be at `./coverage.html`.\n\n## Debugging\n\nYou can enable debugging and error printing to console using `NODE_DEBUG` environment variable:\n\n```bash\n$ NODE_DEBUG="jmx" node [...]\n```\n\n## History\n\n### 0.2.1\n\n* Travis hostname errors fixed.\n* Removed node `0.6` support: not supported by the last `node-java` version.\n* Homepage changed to GitHub Pages.\n\n### 0.2.0\n\n* Added #listMBeans method.\n\n### 0.1.1\n\n* More tests added.\n* Travis and Coveralls integration.\n* JavaJmx#setAttribute className parameter bug fixed.\n* JavaJmx#invoke and javaJmx#setAttribute function parameters management improved.\n\n### 0.1.0\n\n* The first published version.\n\n\n## License and Author\n\n|                      |                                          |\n|:---------------------|:-----------------------------------------|\n| **Author:**          | Xabier de Zuazo (<xabier@onddo.com>)\n| **Copyright:**       | Copyright (c) 2013 Onddo Labs, SL. (www.onddo.com)\n| **License:**         | Apache License, Version 2.0\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n',
53 silly resolved     _id: 'jmx@0.2.1',
53 silly resolved     _from: 'jmx@0.2.1' } ]
54 info install java@0.3.0 into /Volumes/MacintoshHD2/dev/node/rabbit
55 info install jmx@0.2.1 into /Volumes/MacintoshHD2/dev/node/rabbit
56 info installOne java@0.3.0
57 info installOne jmx@0.2.1
58 info /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java unbuild
59 info /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx unbuild
60 verbose tar unpack /Users/pfreitas/.npm/java/0.3.0/package.tgz
61 silly lockFile 318fcf76-ev-node-rabbit-node-modules-java tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java
62 verbose lock tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java /Users/pfreitas/.npm/318fcf76-ev-node-rabbit-node-modules-java.lock
63 silly lockFile 8905f346-eitas-npm-java-0-3-0-package-tgz tar:///Users/pfreitas/.npm/java/0.3.0/package.tgz
64 verbose lock tar:///Users/pfreitas/.npm/java/0.3.0/package.tgz /Users/pfreitas/.npm/8905f346-eitas-npm-java-0-3-0-package-tgz.lock
65 verbose tar unpack /Users/pfreitas/.npm/jmx/0.2.1/package.tgz
66 silly lockFile 29f73f17-dev-node-rabbit-node-modules-jmx tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx
67 verbose lock tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx /Users/pfreitas/.npm/29f73f17-dev-node-rabbit-node-modules-jmx.lock
68 silly lockFile d6982718-reitas-npm-jmx-0-2-1-package-tgz tar:///Users/pfreitas/.npm/jmx/0.2.1/package.tgz
69 verbose lock tar:///Users/pfreitas/.npm/jmx/0.2.1/package.tgz /Users/pfreitas/.npm/d6982718-reitas-npm-jmx-0-2-1-package-tgz.lock
70 silly gunzTarPerm modes [ '755', '644' ]
71 silly gunzTarPerm modes [ '755', '644' ]
72 silly gunzTarPerm extractEntry package.json
73 silly gunzTarPerm extractEntry package.json
74 silly gunzTarPerm extractEntry .npmignore
75 silly gunzTarPerm extractEntry README.md
76 silly gunzTarPerm extractEntry .npmignore
77 silly gunzTarPerm extractEntry README.md
78 silly gunzTarPerm extractEntry LICENSE
79 silly gunzTarPerm extractEntry index.js
80 silly gunzTarPerm extractEntry .travis.yml
81 silly gunzTarPerm extractEntry findJavaHome.js
82 silly gunzTarPerm extractEntry index.js
83 silly gunzTarPerm extractEntry Makefile
84 silly gunzTarPerm extractEntry lib/client.js
85 silly gunzTarPerm extractEntry lib/javaJmx.js
86 silly gunzTarPerm extractEntry mnm.js
87 silly gunzTarPerm extractEntry testHelpers.js
88 silly gunzTarPerm extractEntry lib/adapters/javaReflection.js
89 silly gunzTarPerm extractEntry lib/adapters/mbeanServerConnection.js
90 silly gunzTarPerm extractEntry binding.gyp
91 silly gunzTarPerm extractEntry jarjar.rule
92 silly gunzTarPerm extractEntry lib/adapters/helpers/conversions.js
93 silly gunzTarPerm extractEntry lib/adapters/helpers/jmxServiceUrlBuilder.js
94 silly gunzTarPerm extractEntry commons-lang3-node-java.jar
95 silly gunzTarPerm extractEntry lib/helpers/error.js
96 silly gunzTarPerm extractEntry test/client.js
97 silly gunzTarPerm extractEntry test/integration.js
98 silly gunzTarPerm extractEntry test/javaJmx.js
99 silly gunzTarPerm extractEntry compile-java-code.sh
100 silly gunzTarPerm extractEntry examples/lucene/example.js
101 silly gunzTarPerm extractEntry examples/lucene/lucene-core-3.5.0.jar
102 silly gunzTarPerm extractEntry test/adapters/javaReflection.js
103 silly gunzTarPerm extractEntry test/adapters/mbeanServerConnection.js
104 silly gunzTarPerm extractEntry test/adapters/helpers/conversions.js
105 silly gunzTarPerm extractEntry test/adapters/helpers/jmxServiceUrlBuilder.js
106 silly gunzTarPerm extractEntry test/helpers/error.js
107 silly gunzTarPerm extractEntry test/integration/startJmxApp.js
108 silly gunzTarPerm extractEntry test/integration/JmxAppExample.class
109 silly gunzTarPerm extractEntry test/integration/JmxAppExample.java
110 silly gunzTarPerm extractEntry test/integration/JmxAppExampleMBean.class
111 silly gunzTarPerm extractEntry test/integration/JmxAppExampleMBean.java
112 silly gunzTarPerm extractEntry test/integration/jmxremote.password
113 silly gunzTarPerm extractEntry examples/mixJavaAndNode/runMyClass.js
114 silly lockFile 29f73f17-dev-node-rabbit-node-modules-jmx tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx
115 silly lockFile 29f73f17-dev-node-rabbit-node-modules-jmx tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx
116 silly lockFile d6982718-reitas-npm-jmx-0-2-1-package-tgz tar:///Users/pfreitas/.npm/jmx/0.2.1/package.tgz
117 silly lockFile d6982718-reitas-npm-jmx-0-2-1-package-tgz tar:///Users/pfreitas/.npm/jmx/0.2.1/package.tgz
118 info preinstall jmx@0.2.1
119 verbose readDependencies using package.json deps
120 verbose readDependencies using package.json deps
121 verbose cache add [ 'async@~0.2.8', null ]
122 verbose cache add name=undefined spec="async@~0.2.8" args=["async@~0.2.8",null]
123 verbose parsed url { protocol: null,
123 verbose parsed url   slashes: null,
123 verbose parsed url   auth: null,
123 verbose parsed url   host: null,
123 verbose parsed url   port: null,
123 verbose parsed url   hostname: null,
123 verbose parsed url   hash: null,
123 verbose parsed url   search: null,
123 verbose parsed url   query: null,
123 verbose parsed url   pathname: 'async@~0.2.8',
123 verbose parsed url   path: 'async@~0.2.8',
123 verbose parsed url   href: 'async@~0.2.8' }
124 verbose cache add name="async" spec="~0.2.8" args=["async","~0.2.8"]
125 verbose parsed url { protocol: null,
125 verbose parsed url   slashes: null,
125 verbose parsed url   auth: null,
125 verbose parsed url   host: null,
125 verbose parsed url   port: null,
125 verbose parsed url   hostname: null,
125 verbose parsed url   hash: null,
125 verbose parsed url   search: null,
125 verbose parsed url   query: null,
125 verbose parsed url   pathname: '~0.2.8',
125 verbose parsed url   path: '~0.2.8',
125 verbose parsed url   href: '~0.2.8' }
126 verbose addNamed [ 'async', '~0.2.8' ]
127 verbose addNamed [ null, '>=0.2.8-0 <0.3.0-0' ]
128 silly lockFile fe4c98a1-async-0-2-8 async@~0.2.8
129 verbose lock async@~0.2.8 /Users/pfreitas/.npm/fe4c98a1-async-0-2-8.lock
130 verbose cache add [ 'java@~0.2.1', null ]
131 verbose cache add name=undefined spec="java@~0.2.1" args=["java@~0.2.1",null]
132 verbose parsed url { protocol: null,
132 verbose parsed url   slashes: null,
132 verbose parsed url   auth: null,
132 verbose parsed url   host: null,
132 verbose parsed url   port: null,
132 verbose parsed url   hostname: null,
132 verbose parsed url   hash: null,
132 verbose parsed url   search: null,
132 verbose parsed url   query: null,
132 verbose parsed url   pathname: 'java@~0.2.1',
132 verbose parsed url   path: 'java@~0.2.1',
132 verbose parsed url   href: 'java@~0.2.1' }
133 verbose cache add name="java" spec="~0.2.1" args=["java","~0.2.1"]
134 verbose parsed url { protocol: null,
134 verbose parsed url   slashes: null,
134 verbose parsed url   auth: null,
134 verbose parsed url   host: null,
134 verbose parsed url   port: null,
134 verbose parsed url   hostname: null,
134 verbose parsed url   hash: null,
134 verbose parsed url   search: null,
134 verbose parsed url   query: null,
134 verbose parsed url   pathname: '~0.2.1',
134 verbose parsed url   path: '~0.2.1',
134 verbose parsed url   href: '~0.2.1' }
135 verbose addNamed [ 'java', '~0.2.1' ]
136 verbose addNamed [ null, '>=0.2.1-0 <0.3.0-0' ]
137 silly lockFile ab08c158-java-0-2-1 java@~0.2.1
138 verbose lock java@~0.2.1 /Users/pfreitas/.npm/ab08c158-java-0-2-1.lock
139 silly addNameRange { name: 'async', range: '>=0.2.8-0 <0.3.0-0', hasData: false }
140 silly addNameRange { name: 'java', range: '>=0.2.1-0 <0.3.0-0', hasData: false }
141 verbose url raw async
142 verbose url resolving [ 'https://registry.npmjs.org/', './async' ]
143 verbose url resolved https://registry.npmjs.org/async
144 info trying registry request attempt 1 at 20:56:53
145 verbose etag "C1YKH8TZ8S1V6AO5G9ONFPOLX"
146 http GET https://registry.npmjs.org/async
147 verbose url raw java
148 verbose url resolving [ 'https://registry.npmjs.org/', './java' ]
149 verbose url resolved https://registry.npmjs.org/java
150 info trying registry request attempt 1 at 20:56:53
151 verbose etag "8W9YZA0D8H6CTZICGMNOGLTCB"
152 http GET https://registry.npmjs.org/java
153 silly gunzTarPerm extractEntry examples/mixJavaAndNode/src/com/nearinfinity/nodeJava/MyClass.class
154 silly gunzTarPerm extractEntry examples/mixJavaAndNode/src/com/nearinfinity/nodeJava/MyClass.java
155 silly gunzTarPerm extractEntry projectFilesBackup/.idea/libraries/sass_stdlib.xml
156 silly gunzTarPerm extractEntry projectFilesBackup1/.idea/libraries/sass_stdlib.xml
157 silly gunzTarPerm extractEntry src/methodCallBaton.cpp
158 silly gunzTarPerm extractEntry src/java.cpp
159 silly gunzTarPerm extractEntry src/javaObject.cpp
160 silly gunzTarPerm extractEntry src/javaObject.h
161 silly gunzTarPerm extractEntry src/javaScope.cpp
162 silly gunzTarPerm extractEntry src/javaScope.h
163 silly gunzTarPerm extractEntry src/java.h
164 silly gunzTarPerm extractEntry src/methodCallBaton.h
165 silly gunzTarPerm extractEntry src/nodeJavaBridge.cpp
166 silly gunzTarPerm extractEntry src/node_NodeDynamicProxyClass.h
167 silly gunzTarPerm extractEntry src/utils.cpp
168 silly gunzTarPerm extractEntry src/utils.h
169 silly gunzTarPerm extractEntry src-java/node/NodeDynamicProxyClass.class
170 silly gunzTarPerm extractEntry src-java/node/NodeDynamicProxyClass.java
171 silly gunzTarPerm extractEntry test/utils-types-test.js
172 silly gunzTarPerm extractEntry test/simple-test.js
173 silly gunzTarPerm extractEntry test/javaObject-test.js
174 silly gunzTarPerm extractEntry test/java-staticField-test.js
175 silly gunzTarPerm extractEntry test/java-newInstance-test.js
176 silly gunzTarPerm extractEntry test/java-callStaticMethod-test.js
177 silly gunzTarPerm extractEntry test/instanceof-test.js
178 silly gunzTarPerm extractEntry test/importClass-test.js
179 silly gunzTarPerm extractEntry test/dynamicProxy-test.js
180 silly gunzTarPerm extractEntry test/awt-test.js
181 silly gunzTarPerm extractEntry test/Test$SuperClass.class
182 silly gunzTarPerm extractEntry test/TestExceptions.java
183 silly gunzTarPerm extractEntry test/commons-lang3-3.1.jar
184 silly gunzTarPerm extractEntry test/TestExceptions.class
185 silly gunzTarPerm extractEntry test/Test.java
186 silly gunzTarPerm extractEntry test/Test.class
187 silly gunzTarPerm extractEntry test/RunInterface$Interface1Arg.class
188 silly gunzTarPerm extractEntry test/Test$SubClass.class
189 silly gunzTarPerm extractEntry test/RunInterface.java
190 silly gunzTarPerm extractEntry test/RunInterface.class
191 silly gunzTarPerm extractEntry test/nodejs.png
192 silly gunzTarPerm extractEntry test/RunInterface$InterfaceWithReturn.class
193 silly gunzTarPerm extractEntry test/RunInterface$Interface0Arg.class
194 silly gunzTarPerm extractEntry touch.py
195 silly gunzTarPerm extractEntry lib/nodeJavaBridge.js
196 silly lockFile 318fcf76-ev-node-rabbit-node-modules-java tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java
197 silly lockFile 318fcf76-ev-node-rabbit-node-modules-java tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java
198 silly lockFile 8905f346-eitas-npm-java-0-3-0-package-tgz tar:///Users/pfreitas/.npm/java/0.3.0/package.tgz
199 silly lockFile 8905f346-eitas-npm-java-0-3-0-package-tgz tar:///Users/pfreitas/.npm/java/0.3.0/package.tgz
200 info preinstall java@0.3.0
201 verbose readDependencies using package.json deps
202 verbose readDependencies using package.json deps
203 verbose cache add [ 'find-java-home@0.0.3', null ]
204 verbose cache add name=undefined spec="find-java-home@0.0.3" args=["find-java-home@0.0.3",null]
205 verbose parsed url { protocol: null,
205 verbose parsed url   slashes: null,
205 verbose parsed url   auth: null,
205 verbose parsed url   host: null,
205 verbose parsed url   port: null,
205 verbose parsed url   hostname: null,
205 verbose parsed url   hash: null,
205 verbose parsed url   search: null,
205 verbose parsed url   query: null,
205 verbose parsed url   pathname: 'find-java-home@0.0.3',
205 verbose parsed url   path: 'find-java-home@0.0.3',
205 verbose parsed url   href: 'find-java-home@0.0.3' }
206 verbose cache add name="find-java-home" spec="0.0.3" args=["find-java-home","0.0.3"]
207 verbose parsed url { protocol: null,
207 verbose parsed url   slashes: null,
207 verbose parsed url   auth: null,
207 verbose parsed url   host: null,
207 verbose parsed url   port: null,
207 verbose parsed url   hostname: null,
207 verbose parsed url   hash: null,
207 verbose parsed url   search: null,
207 verbose parsed url   query: null,
207 verbose parsed url   pathname: '0.0.3',
207 verbose parsed url   path: '0.0.3',
207 verbose parsed url   href: '0.0.3' }
208 verbose addNamed [ 'find-java-home', '0.0.3' ]
209 verbose addNamed [ '0.0.3', '0.0.3' ]
210 silly lockFile 5aee3e5d-find-java-home-0-0-3 find-java-home@0.0.3
211 verbose lock find-java-home@0.0.3 /Users/pfreitas/.npm/5aee3e5d-find-java-home-0-0-3.lock
212 verbose url raw find-java-home/0.0.3
213 verbose url resolving [ 'https://registry.npmjs.org/', './find-java-home/0.0.3' ]
214 verbose url resolved https://registry.npmjs.org/find-java-home/0.0.3
215 info trying registry request attempt 1 at 20:56:54
216 verbose etag "5842UTIT4H56Z8A33PAENQH90"
217 http GET https://registry.npmjs.org/find-java-home/0.0.3
218 http 304 https://registry.npmjs.org/async
219 silly registry.get cb [ 304,
219 silly registry.get   { date: 'Thu, 06 Feb 2014 22:56:53 GMT',
219 silly registry.get     server: 'Apache',
219 silly registry.get     connection: 'Keep-Alive',
219 silly registry.get     'keep-alive': 'timeout=10, max=50',
219 silly registry.get     etag: '"C1YKH8TZ8S1V6AO5G9ONFPOLX"',
219 silly registry.get     'cache-control': 'max-age=1',
219 silly registry.get     vary: 'Accept' } ]
220 verbose etag async from cache
221 silly addNameRange number 2 { name: 'async', range: '>=0.2.8-0 <0.3.0-0', hasData: true }
222 silly addNameRange versions [ 'async',
222 silly addNameRange   [ '0.1.0',
222 silly addNameRange     '0.1.1',
222 silly addNameRange     '0.1.2',
222 silly addNameRange     '0.1.3',
222 silly addNameRange     '0.1.4',
222 silly addNameRange     '0.1.5',
222 silly addNameRange     '0.1.6',
222 silly addNameRange     '0.1.7',
222 silly addNameRange     '0.1.8',
222 silly addNameRange     '0.1.9',
222 silly addNameRange     '0.1.10',
222 silly addNameRange     '0.1.11',
222 silly addNameRange     '0.1.12',
222 silly addNameRange     '0.1.13',
222 silly addNameRange     '0.1.14',
222 silly addNameRange     '0.1.15',
222 silly addNameRange     '0.1.16',
222 silly addNameRange     '0.1.17',
222 silly addNameRange     '0.1.18',
222 silly addNameRange     '0.1.19',
222 silly addNameRange     '0.1.20',
222 silly addNameRange     '0.1.21',
222 silly addNameRange     '0.1.22',
222 silly addNameRange     '0.2.0',
222 silly addNameRange     '0.2.1',
222 silly addNameRange     '0.2.2',
222 silly addNameRange     '0.2.3',
222 silly addNameRange     '0.2.4',
222 silly addNameRange     '0.2.5',
222 silly addNameRange     '0.2.6',
222 silly addNameRange     '0.2.7',
222 silly addNameRange     '0.2.8',
222 silly addNameRange     '0.2.9',
222 silly addNameRange     '0.2.10' ] ]
223 verbose addNamed [ 'async', '0.2.10' ]
224 verbose addNamed [ '0.2.10', '0.2.10' ]
225 silly lockFile 098b530d-async-0-2-10 async@0.2.10
226 verbose lock async@0.2.10 /Users/pfreitas/.npm/098b530d-async-0-2-10.lock
227 silly lockFile 098b530d-async-0-2-10 async@0.2.10
228 silly lockFile 098b530d-async-0-2-10 async@0.2.10
229 silly lockFile fe4c98a1-async-0-2-8 async@~0.2.8
230 silly lockFile fe4c98a1-async-0-2-8 async@~0.2.8
231 http 304 https://registry.npmjs.org/java
232 silly registry.get cb [ 304,
232 silly registry.get   { date: 'Thu, 06 Feb 2014 22:56:53 GMT',
232 silly registry.get     server: 'Apache',
232 silly registry.get     connection: 'Keep-Alive',
232 silly registry.get     'keep-alive': 'timeout=10, max=50',
232 silly registry.get     etag: '"8W9YZA0D8H6CTZICGMNOGLTCB"',
232 silly registry.get     'cache-control': 'max-age=1',
232 silly registry.get     vary: 'Accept' } ]
233 verbose etag java from cache
234 silly addNameRange number 2 { name: 'java', range: '>=0.2.1-0 <0.3.0-0', hasData: true }
235 silly addNameRange versions [ 'java',
235 silly addNameRange   [ '0.0.1',
235 silly addNameRange     '0.0.2',
235 silly addNameRange     '0.0.3',
235 silly addNameRange     '0.0.4',
235 silly addNameRange     '0.0.5',
235 silly addNameRange     '0.0.6',
235 silly addNameRange     '0.1.0',
235 silly addNameRange     '0.1.1',
235 silly addNameRange     '0.1.2',
235 silly addNameRange     '0.1.3',
235 silly addNameRange     '0.2.0',
235 silly addNameRange     '0.2.1',
235 silly addNameRange     '0.2.2',
235 silly addNameRange     '0.2.3',
235 silly addNameRange     '0.2.4',
235 silly addNameRange     '0.2.5',
235 silly addNameRange     '0.2.6',
235 silly addNameRange     '0.2.7',
235 silly addNameRange     '0.2.8',
235 silly addNameRange     '0.2.9',
235 silly addNameRange     '0.3.0' ] ]
236 verbose addNamed [ 'java', '0.2.9' ]
237 verbose addNamed [ '0.2.9', '0.2.9' ]
238 silly lockFile 1e1dbba0-java-0-2-9 java@0.2.9
239 verbose lock java@0.2.9 /Users/pfreitas/.npm/1e1dbba0-java-0-2-9.lock
240 silly lockFile 1e1dbba0-java-0-2-9 java@0.2.9
241 silly lockFile 1e1dbba0-java-0-2-9 java@0.2.9
242 silly lockFile ab08c158-java-0-2-1 java@~0.2.1
243 silly lockFile ab08c158-java-0-2-1 java@~0.2.1
244 silly resolved [ { name: 'async',
244 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
244 silly resolved     main: './lib/async',
244 silly resolved     author: { name: 'Caolan McMahon' },
244 silly resolved     version: '0.2.10',
244 silly resolved     repository: { type: 'git', url: 'https://github.com/caolan/async.git' },
244 silly resolved     bugs: { url: 'https://github.com/caolan/async/issues' },
244 silly resolved     licenses: [ [Object] ],
244 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
244 silly resolved     jam: { main: 'lib/async.js', include: [Object] },
244 silly resolved     scripts: { test: 'nodeunit test/test-async.js' },
244 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser. Also supports [component](https://github.com/component/component).\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn\'t working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent` expression in the square\n  // function is not evaluated in the context of AsyncSquaringLibrary, and is\n  // therefore undefined.\n});\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){\n  // result is [1, 4, 9]\n  // With the help of bind we can attach a context to the iterator before\n  // passing it to async. Now the square function will be executed in its \n  // \'home\' AsyncSquaringLibrary context and the value of `this.squareExponent`\n  // will be as expected.\n});\n```\n\n## Download\n\nThe source is available for download from\n[GitHub](http://github.com/caolan/async).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed\n\n## In the Browser\n\nSo far it\'s been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type="text/javascript" src="async.js"></script>\n<script type="text/javascript">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [eachSeries](#eachSeries)\n* [eachLimit](#eachLimit)\n* [map](#map)\n* [mapSeries](#mapSeries)\n* [mapLimit](#mapLimit)\n* [filter](#filter)\n* [filterSeries](#filterSeries)\n* [reject](#reject)\n* [rejectSeries](#rejectSeries)\n* [reduce](#reduce)\n* [reduceRight](#reduceRight)\n* [detect](#detect)\n* [detectSeries](#detectSeries)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n* [concatSeries](#concatSeries)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [parallelLimit](#parallellimittasks-limit-callback)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [forever](#forever)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [applyEachSeries](#applyEachSeries)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n<a name="each" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="forEachSeries" />\n<a name="eachSeries" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n<a name="eachLimit" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="mapLimit" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.mapLimit([\'file1\',\'file2\',\'file3\'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then it\'s probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, \'one\');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, \'two\');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to [\'one\', \'two\']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'one\');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'two\');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal [\'one\',\'two\'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of "limit" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first "limit" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name="doWhilst" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name="doUntil" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n---------------------------------------\n\n<a name="forever" />\n### forever(fn, callback)\n\nCalls the asynchronous function \'fn\' repeatedly, in series, indefinitely.\nIf an error is passed to fn\'s callback then \'callback\' is called with the\nerror, otherwise it will never be called.\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, \'one\', \'two\');\n    },\n    function(arg1, arg2, callback){\n        callback(null, \'three\');\n    },\n    function(arg1, callback){\n        // arg1 now equals \'three\'\n        callback(null, \'done\');\n    }\n], function (err, result) {\n   // result now equals \'done\'    \n});\n```\n\n---------------------------------------\n<a name="compose" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name="applyEach" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], \'bucket\', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name="applyEachSeries" />\n### applyEachSeries(arr, iterator, callback)\n\nThe same as applyEach only the functions are applied in series.\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log(\'hello \' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log(\'all items have been processed\');\n}\n\n// add some items to the queue\n\nq.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\nq.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n```\n\n---------------------------------------\n\n<a name="cargo" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing an array of\n  queued tasks, which must call its callback(err) argument when finished, with \n  an optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  processed per round; if omitted, the default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (tasks, callback) {\n    for(var i=0; i<tasks.length; i++){\n      console.log(\'hello \' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\ncargo.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\ncargo.push({name: \'baz\'}, function (err) {\n    console.log(\'finished processing baz\');\n});\n```\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, \'data.txt\', \'utf-8\')\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile(\'data.txt\', \'utf-8\', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile(\'data.txt\', \'utf-8\', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function\'s execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: [\'get_data\', \'make_folder\', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: [\'write_file\', function(callback, results){\n        // once the file is written let\'s email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let\'s email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. It\'s also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p(\'one\'); },\n    function(){ sys.p(\'two\'); },\n    function(){ sys.p(\'three\'); }\n]);\n\nnode> var iterator2 = iterator();\n\'one\'\nnode> var iterator3 = iterator2();\n\'two\'\nnode> iterator3();\n\'three\'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n\'three\'\n```\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n    async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile(\'testfile1\', \'test1\', callback);\n    },\n    function(callback){\n        fs.writeFile(\'testfile2\', \'test2\', callback);\n    }\n]);\n```\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, \'one\');\nnode> fn(\'two\', \'three\');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push(\'two\');\n    // call_order now equals [\'one\',\'two\']\n});\ncall_order.push(\'one\')\n```\n\n<a name="times" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: \'user\' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name="timesSeries" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn(\'some name\', function () {\n    // callback\n});\n```\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, \'hello \' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, \'world\');\n\'hello world\'\n```\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, \'world\');\n{hello: \'world\'}\n```\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
244 silly resolved     readmeFilename: 'README.md',
244 silly resolved     homepage: 'https://github.com/caolan/async',
244 silly resolved     _id: 'async@0.2.10',
244 silly resolved     _from: 'async@~0.2.8' },
244 silly resolved   { name: 'java',
244 silly resolved     description: 'Bridge API to connect with existing Java APIs.',
244 silly resolved     author: { name: 'Joe Ferner', email: 'joe.ferner@nearinfinity.com' },
244 silly resolved     keywords: [ 'java', 'jvm', 'bridge' ],
244 silly resolved     version: '0.2.9',
244 silly resolved     engines: { node: '>=0.6.0' },
244 silly resolved     maintainers: [ [Object], [Object] ],
244 silly resolved     bugs: { url: 'https://github.com/nearinfinity/node-java/issues' },
244 silly resolved     license: 'MIT',
244 silly resolved     repository:
244 silly resolved      { type: 'git',
244 silly resolved        url: 'https://github.com/nearinfinity/node-java.git' },
244 silly resolved     dependencies: {},
244 silly resolved     devDependencies: { nodeunit: '~0.6.4', memwatch: '~0.2.0', async: '~0.1.22' },
244 silly resolved     scripts: { test: 'nodeunit test', install: 'node-gyp rebuild' },
244 silly resolved     main: './index.js',
244 silly resolved     gypfile: true,
244 silly resolved     readme: '# java\n\nBridge API to connect with existing Java APIs.\n\n[Google Groups Discussion Forum](https://groups.google.com/forum/#!forum/node-java)\n\n## Installation Linux/Windows\n\n```bash\n$ export JAVA_HOME=/usr/local/share/jdk1.6.0_30\n$ npm install java\n```\n\nNotes:\n* node-gyp requires python 2.x not python 3.x. See https://github.com/TooTallNate/node-gyp/issues/155 for more details.\n* If you see an error such as "No rule to make target \'/opt/jdk1.7.0_09/jre/lib/amd64/server/libjvm.so\', needed by \'build/depsVerified\'.  Stop."\n      this means that your JAVA_HOME is not set correctly and you need to verify the location of libjvm.so or jvm.lib.\n* If you see an error such as "Error: The specified module could not be found. \n      xxxxxx\\node_modules\\java\\build\\Release\\nodejavabridge_bindings.node".\n      Ensure the directory where jvm.dll exists is in your PATH. (e.g. C:\\Program Files (x86)\\Java\\jdk1.6.0_18\\jre\\bin\\client).\n      This path cannot have quotes.\n\n\n## Installation Mac\n\n```bash\n$ npm install java\n```\n\n_Mavericks Users: If you are having problems finding \'jni.h\' please see [Issue #86](https://github.com/nearinfinity/node-java/issues/86)_\n\n## Installation ARM (Raspberry Pi)\n\n```bash\nGYP_DEFINES="armv7=0" CCFLAGS=\'-march=armv6\' CXXFLAGS=\'-march=armv6\' npm install java\n```\n\n## Manual compile (Using node-gyp)\n\n```bash\n./compile-java-code.sh\nnode-gyp configure build\nnpm test\n```\n\n_NOTE: You will need node-gyp installed using "npm install -g node-gyp"_\n\n## Quick Examples\n\n```javascript\nvar java = require("java");\njava.classpath.push("commons-lang3-3.1.jar");\njava.classpath.push("commons-io.jar");\n\nvar list = java.newInstanceSync("java.util.ArrayList");\n\njava.newInstance("java.util.ArrayList", function(err, list) {\n  list.addSync("item1");\n  list.addSync("item2");\n});\n\nvar ArrayList = java.import(\'java.util.ArrayList\');\nvar list = new ArrayList();\nlist.addSync(\'item1\');\n```\n\n### Create a char array\n\n```javascript\nvar charArray = java.newArray("char", "hello world\\n".split(\'\'));\n```\n\n### Create a byte array\n\n```javascript\nvar byteArray = java.newArray(\n  "byte",\n  "hello world\\n"\n    .split(\'\')\n    .map(function(c) { return java.newByte(str.charCodeAt(c)); });\n```\n\n### Using java.lang.Long and long\n\nJavaScript only supports 32-bit integers. Because of this java longs must be treated specially.\nWhen getting a long result the value may be truncated. If you need the original value there is\na property off of the result called "longValue" which contains the un-truncated value as a string.\nIf you are calling a method that takes a long you must create it using [java.newInstance](#javaNewInstance).\n\n```javascript\nvar javaLong = java.newInstanceSync("java.lang.Long", 5);\nconsole.log(\'Possibly truncated long value: \' + javaLong);\nconsole.log(\'Original long value (as a string): \' + javaLong.longValue);\njava.callStaticMethodSync("Test", "staticMethodThatTakesALong", javaLong);\n```\n\n### Exceptions\n\nExceptions from calling methods either caught using JavaScript try/catch block or passed\nto a callback as the first parameter may have a property named "cause" which has a reference\nto the Java Exception object which caused the error.\n\n```javascript\ntry {\n  java.methodThatThrowsExceptionSync();\n} catch(ex) {\n  console.log(ex.cause.getMessageSync());\n}\n```\n\n# Release Notes\n\n### v0.2.0\n\n* java.lang.Long and long primitives are handled better. See\n  \\([Issue #37](https://github.com/nearinfinity/node-java/issues/37)\\) and\n  \\([Issue #40](https://github.com/nearinfinity/node-java/issues/40)\\).\n\n# Index\n\n## java\n * [classpath](#javaClasspath)\n * [options](#javaOptions)\n * [import](#javaImport)\n * [newInstance](#javaNewInstance)\n * [instanceOf](#javaInstanceOf)\n * [callStaticMethod](#javaCallStaticMethod)\n * [getStaticFieldValue](#javaGetStaticFieldValue)\n * [setStaticFieldValue](#javaSetStaticFieldValue)\n * [newArray](#javaNewArray)\n * [newByte](#javaNewByte)\n * [newShort](#javaNewShort)\n * [newLong](#javaNewLong)\n * [newChar](#javaNewChar)\n * [newDouble](#javaNewDouble)\n * [newFloat](#javaNewFloat)\n * [newProxy](#javaNewProxy)\n\n## java objects\n * [Call Method](#javaObjectCallMethod)\n * [Get/Set Field](#javaObjectGetSetField)\n\n# API Documentation\n\n<a name="java"/>\n## java\n\n<a name="javaClasspath" />\n**java.classpath**\n\nArray of paths or jars to pass to the creation of the JVM.\n\nAll items must be added to the classpath before calling any other node-java methods.\n\n__Example__\n\n    java.classpath.push(\'commons.io.jar\');\n\n<a name="javaOptions" />\n**java.options**\n\nArray of options to pass to the creation of the JVM.\n\nAll items must be added to the options before calling any other node-java methods.\n\n__Example__\n\n    java.options.push(\'-Djava.awt.headless=true\');\n    java.options.push(\'-Xmx1024m\');\n\n<a name="javaImport" />\n**java.import(className)**\n\nLoads the class given by className such that it acts and feels like a javascript object.\n\n__Arguments__\n\n * className - The name of the class to create. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n\n__Example__\n\n    var Test = java.import(\'Test\');\n    Test.someStaticMethodSync(5);\n    console.log(Test.someStaticField);\n\n    var test = new Test();\n    list.instanceMethodSync(\'item1\');\n\n<a name="javaNewInstance" />\n**java.newInstance(className, [args...], callback)**\n\n**java.newInstanceSync(className, [args...]) : result**\n\nCreates an instance of the specified class. If you are using the sync method an exception will be throw if an error occures,\notherwise it will be the first argument in the callback.\n\n__Arguments__\n\n * className - The name of the class to create. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * callback(err, item) - Callback to be called when the class is created.\n\n__Example__\n\n    var list = java.newInstanceSync("java.util.ArrayList");\n\n    java.newInstance("java.util.ArrayList", function(err, list) {\n      if(err) { console.error(err); return; }\n      // new list\n    });\n\n<a name="javaInstanceOf" />\n**java.instanceOf(javaObject, className)**\n\nDetermines of a javaObject is an instance of a class.\n\n__Arguments__\n\n * javaObject - Instance of a java object returned from a method or from newInstance.\n * className - A string class name.\n\n__Example__\n\n    var obj = java.newInstanceSync("my.package.SubClass");\n\n    if(java.instanceOf(obj, "my.package.SuperClass")) {\n      console.log("obj is an instance of SuperClass");\n    }\n\n<a name="javaCallStaticMethod" />\n**java.callStaticMethod(className, methodName, [args...], callback)**\n\n**java.callStaticMethodSync(className, methodName, [args...]) : result**\n\nCalls a static method on the specified class. If you are using the sync method an exception will be throw if an error occures,\notherwise it will be the first argument in the callback.\n\n__Arguments__\n\n * className - The name of the class to call the method on. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * methodName - The name of the method to call.\n * callback(err, item) - Callback to be called when the class is created.\n\n__Example__\n\n    var result = java.callStaticMethodSync("com.nearinfinty.MyClass", "doSomething", 42, "test");\n\n    java.callStaticMethod("com.nearinfinty.MyClass", "doSomething", 42, "test", function(err, results) {\n      if(err) { console.error(err); return; }\n      // results from doSomething\n    });\n\n<a name="javaGetStaticFieldValue" />\n**java.getStaticFieldValue(className, fieldName)**\n\nGets a static field value from the specified class.\n\n__Arguments__\n\n * className - The name of the class to get the value from. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * fieldName - The name of the field to get the value from.\n\n__Example__\n\n    var data = java.getStaticFieldValue("com.nearinfinty.MyClass", "data");\n\n<a name="javaSetStaticFieldValue" />\n**java.setStaticFieldValue(className, fieldName, newValue)**\n\nSets a static field value on the specified class.\n\n__Arguments__\n\n * className - The name of the class to set the value on. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * fieldName - The name of the field to set the value on.\n * newValue - The new value to assign to the field.\n\n__Example__\n\n    java.getStaticFieldValue("com.nearinfinty.MyClass", "data", "Hello World");\n\n<a name="javaNewArray" />\n**java.newArray(className, values[])**\n\nCreates a new java array of type class.\n\n__Arguments__\n\n * className - The name of the type of array elements. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * values - A javascript array of values to assign to the java array.\n\n__Example__\n\n    var newArray = java.newArray("java.lang.String", ["item1", "item2", "item3"]);\n\n<a name="javaNewByte" />\n**java.newByte(val)**\n\nCreates a new java byte. This is needed because javascript does not have the concept of a byte.\n\n__Arguments__\n\n * val - The value of the java byte.\n\n__Example__\n\n    var b = java.newByte(12);\n\n<a name="javaNewShort" />\n**java.newShort(val)**\n\nCreates a new java short. This is needed because javascript does not have the concept of a short.\n\n__Arguments__\n\n * val - The value of the java short.\n\n__Example__\n\n    var s = java.newShort(12);\n\n<a name="javaNewLong" />\n**java.newLong(val)**\n\nCreates a new java long. This is needed because javascript does not have the concept of a long.\n\n__Arguments__\n\n * val - The value of the java long.\n\n__Example__\n\n    var s = java.newLong(12);\n\n<a name="javaNewChar" />\n**java.newChar(val)**\n\nCreates a new java char. This is needed because javascript does not have the concept of a char.\n\n__Arguments__\n\n * val - The value of the java char.\n\n__Example__\n\n    var ch = java.newChar(\'a\');\n\n<a name="javaNewDouble" />\n**java.newDouble(val)**\n\nCreates a new java double. This is needed to force javascript\'s number to a double to call some methods.\n\n__Arguments__\n\n * val - The value of the java double.\n\n__Example__\n\n    var d = java.newDouble(3.14);\n\n<a name="javaNewFloat" />\n**java.newFloat(val)**\n\nCreates a new java float. This is needed to force javascript\'s number to a float to call some methods.\n\n__Arguments__\n\n * val - The value of the java float.\n\n__Example__\n\n    var f = java.newFloat(3.14);\n\n<a name="javaNewProxy" />\n**java.newProxy(interfaceName, functions)**\n\nCreates a new java Proxy for the given interface. Functions passed in will run on the v8 main thread and not a new thread.\n\nThe returned object has two methods ref() and unref() which you can use to maintain references to prevent premature\ngarbage collection. You must call these methods to ensure the proxy stays around.\n\n__Arguments__\n\n * interfaceName - The name of the interface to proxy. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * functions - A hash of functions matching the function in the interface.\n\n__Example__\n\n    var myProxy = java.newProxy(\'java.lang.Runnable\', {\n      run: function () {\n        // This is actually run on the v8 thread and not the new java thread\n        console.log("hello from thread");\n      }\n    });\n\n    var thread = java.newInstanceSync("java.lang.Thread", myProxy);\n    thread.start();\n\n<a name="javaObject"/>\n## java object\n\n<a name="javaObjectCallMethod" />\n**obj._methodName_([args...], callback)**\n\n**obj._methodNameSync_([args...]) : result**\n\nOnce you have a java object either by creating a new instance or as a result of a method call you can then call methods on that object.\nAll public, non-static methods are exposed in synchronous and asynchronous flavors.\n\n__Arguments__\n\n * args - The arguments to pass to the method.\n * callback(err, item) - Callback to be called when the method has completed.\n\n__Example__\n\n    var list = java.newInstanceSync("java.util.ArrayList");\n    list.addSync("item1");\n    list.add("item2", function(err, result) {\n      if(err) { console.error(err); return; }\n    });\n\n<a name="javaObjectGetSetField" />\n**obj._fieldName_ = val**\n\n**val = obj._fieldName_**\n\nOnce you have a java object either by creating a new instance or as a result of a method call you can get instance\nfield values.\n\n__Example__\n\n    var list = java.newInstanceSync("com.nearinfinty.MyClass");\n    list.data = "test";\n    var data = list.data;\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
244 silly resolved     readmeFilename: 'README.md',
244 silly resolved     homepage: 'https://github.com/nearinfinity/node-java',
244 silly resolved     _id: 'java@0.2.9',
244 silly resolved     _from: 'java@~0.2.1' } ]
245 info install async@0.2.10 into /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx
246 info install java@0.2.9 into /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx
247 info installOne async@0.2.10
248 info installOne java@0.2.9
249 info /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/async unbuild
250 info /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/java unbuild
251 verbose tar unpack /Users/pfreitas/.npm/async/0.2.10/package.tgz
252 silly lockFile be37126f-e-modules-jmx-node-modules-async tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/async
253 verbose lock tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/async /Users/pfreitas/.npm/be37126f-e-modules-jmx-node-modules-async.lock
254 silly lockFile cdc65c04-tas-npm-async-0-2-10-package-tgz tar:///Users/pfreitas/.npm/async/0.2.10/package.tgz
255 verbose lock tar:///Users/pfreitas/.npm/async/0.2.10/package.tgz /Users/pfreitas/.npm/cdc65c04-tas-npm-async-0-2-10-package-tgz.lock
256 verbose tar unpack /Users/pfreitas/.npm/java/0.2.9/package.tgz
257 silly lockFile a3cbdae1-de-modules-jmx-node-modules-java tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/java
258 verbose lock tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/java /Users/pfreitas/.npm/a3cbdae1-de-modules-jmx-node-modules-java.lock
259 silly lockFile ad129ba0-eitas-npm-java-0-2-9-package-tgz tar:///Users/pfreitas/.npm/java/0.2.9/package.tgz
260 verbose lock tar:///Users/pfreitas/.npm/java/0.2.9/package.tgz /Users/pfreitas/.npm/ad129ba0-eitas-npm-java-0-2-9-package-tgz.lock
261 silly gunzTarPerm modes [ '755', '644' ]
262 silly gunzTarPerm modes [ '755', '644' ]
263 silly gunzTarPerm extractEntry package.json
264 silly gunzTarPerm extractEntry package.json
265 silly gunzTarPerm extractEntry README.md
266 silly gunzTarPerm extractEntry LICENSE
267 silly gunzTarPerm extractEntry component.json
268 silly gunzTarPerm extractEntry lib/async.js
269 silly gunzTarPerm extractEntry .npmignore
270 silly gunzTarPerm extractEntry README.md
271 silly gunzTarPerm extractEntry LICENSE
272 silly gunzTarPerm extractEntry index.js
273 silly gunzTarPerm extractEntry mnm.js
274 silly gunzTarPerm extractEntry testHelpers.js
275 silly gunzTarPerm extractEntry touch.py
276 silly gunzTarPerm extractEntry jarjar.rule
277 silly gunzTarPerm extractEntry binding.gyp
278 silly gunzTarPerm extractEntry commons-lang3-node-java.jar
279 silly gunzTarPerm extractEntry compile-java-code.sh
280 silly gunzTarPerm extractEntry projectFilesBackup/.idea/libraries/sass_stdlib.xml
281 silly gunzTarPerm extractEntry projectFilesBackup1/.idea/libraries/sass_stdlib.xml
282 silly gunzTarPerm extractEntry src/methodCallBaton.cpp
283 silly gunzTarPerm extractEntry src/java.cpp
284 silly gunzTarPerm extractEntry src/javaObject.cpp
285 silly gunzTarPerm extractEntry src/javaObject.h
286 silly gunzTarPerm extractEntry src/javaScope.cpp
287 silly gunzTarPerm extractEntry src/javaScope.h
288 silly gunzTarPerm extractEntry src/java.h
289 silly gunzTarPerm extractEntry src/methodCallBaton.h
290 silly gunzTarPerm extractEntry src/nodeJavaBridge.cpp
291 silly gunzTarPerm extractEntry src/node_NodeDynamicProxyClass.h
292 silly gunzTarPerm extractEntry src/utils.cpp
293 silly gunzTarPerm extractEntry src/utils.h
294 silly gunzTarPerm extractEntry src-java/node/NodeDynamicProxyClass.class
295 silly gunzTarPerm extractEntry src-java/node/NodeDynamicProxyClass.java
296 silly gunzTarPerm extractEntry test/utils-types-test.js
297 silly gunzTarPerm extractEntry test/simple-test.js
298 silly gunzTarPerm extractEntry test/javaObject-test.js
299 silly gunzTarPerm extractEntry test/java-staticField-test.js
300 silly gunzTarPerm extractEntry test/java-newInstance-test.js
301 silly gunzTarPerm extractEntry test/java-callStaticMethod-test.js
302 silly gunzTarPerm extractEntry test/instanceof-test.js
303 silly gunzTarPerm extractEntry test/importClass-test.js
304 silly gunzTarPerm extractEntry test/dynamicProxy-test.js
305 silly gunzTarPerm extractEntry test/awt-test.js
306 silly gunzTarPerm extractEntry test/Test$SuperClass.class
307 silly gunzTarPerm extractEntry test/TestExceptions.java
308 silly gunzTarPerm extractEntry test/commons-lang3-3.1.jar
309 silly gunzTarPerm extractEntry test/TestExceptions.class
310 silly lockFile be37126f-e-modules-jmx-node-modules-async tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/async
311 silly lockFile be37126f-e-modules-jmx-node-modules-async tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/async
312 silly lockFile cdc65c04-tas-npm-async-0-2-10-package-tgz tar:///Users/pfreitas/.npm/async/0.2.10/package.tgz
313 silly lockFile cdc65c04-tas-npm-async-0-2-10-package-tgz tar:///Users/pfreitas/.npm/async/0.2.10/package.tgz
314 info preinstall async@0.2.10
315 silly gunzTarPerm extractEntry test/Test.java
316 silly gunzTarPerm extractEntry test/Test.class
317 verbose readDependencies using package.json deps
318 verbose readDependencies using package.json deps
319 silly resolved []
320 verbose about to build /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/async
321 info build /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/async
322 verbose linkStuff [ false,
322 verbose linkStuff   false,
322 verbose linkStuff   false,
322 verbose linkStuff   '/Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules' ]
323 info linkStuff async@0.2.10
324 verbose linkBins async@0.2.10
325 verbose linkMans async@0.2.10
326 verbose rebuildBundles async@0.2.10
327 info install async@0.2.10
328 info postinstall async@0.2.10
329 silly gunzTarPerm extractEntry test/RunInterface$Interface1Arg.class
330 silly gunzTarPerm extractEntry test/Test$SubClass.class
331 silly gunzTarPerm extractEntry test/RunInterface.java
332 silly gunzTarPerm extractEntry test/RunInterface.class
333 silly gunzTarPerm extractEntry test/nodejs.png
334 silly gunzTarPerm extractEntry test/RunInterface$InterfaceWithReturn.class
335 silly gunzTarPerm extractEntry test/RunInterface$Interface0Arg.class
336 silly gunzTarPerm extractEntry examples/lucene/example.js
337 silly gunzTarPerm extractEntry examples/lucene/lucene-core-3.5.0.jar
338 silly gunzTarPerm extractEntry examples/mixJavaAndNode/runMyClass.js
339 silly gunzTarPerm extractEntry examples/mixJavaAndNode/src/com/nearinfinity/nodeJava/MyClass.class
340 silly gunzTarPerm extractEntry examples/mixJavaAndNode/src/com/nearinfinity/nodeJava/MyClass.java
341 silly gunzTarPerm extractEntry lib/nodeJavaBridge.js
342 silly lockFile a3cbdae1-de-modules-jmx-node-modules-java tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/java
343 silly lockFile a3cbdae1-de-modules-jmx-node-modules-java tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/java
344 silly lockFile ad129ba0-eitas-npm-java-0-2-9-package-tgz tar:///Users/pfreitas/.npm/java/0.2.9/package.tgz
345 silly lockFile ad129ba0-eitas-npm-java-0-2-9-package-tgz tar:///Users/pfreitas/.npm/java/0.2.9/package.tgz
346 info preinstall java@0.2.9
347 verbose readDependencies using package.json deps
348 verbose readDependencies using package.json deps
349 silly resolved []
350 verbose about to build /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/java
351 info build /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/java
352 verbose linkStuff [ false,
352 verbose linkStuff   false,
352 verbose linkStuff   false,
352 verbose linkStuff   '/Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules' ]
353 info linkStuff java@0.2.9
354 verbose linkBins java@0.2.9
355 verbose linkMans java@0.2.9
356 verbose rebuildBundles java@0.2.9
357 info install java@0.2.9
358 verbose unsafe-perm in lifecycle true
359 http 304 https://registry.npmjs.org/find-java-home/0.0.3
360 silly registry.get cb [ 304,
360 silly registry.get   { date: 'Thu, 06 Feb 2014 22:56:53 GMT',
360 silly registry.get     server: 'Apache',
360 silly registry.get     connection: 'Keep-Alive',
360 silly registry.get     'keep-alive': 'timeout=10, max=50',
360 silly registry.get     etag: '"5842UTIT4H56Z8A33PAENQH90"',
360 silly registry.get     'cache-control': 'max-age=1',
360 silly registry.get     vary: 'Accept' } ]
361 verbose etag find-java-home/0.0.3 from cache
362 silly lockFile 5aee3e5d-find-java-home-0-0-3 find-java-home@0.0.3
363 silly lockFile 5aee3e5d-find-java-home-0-0-3 find-java-home@0.0.3
364 silly resolved [ { name: 'find-java-home',
364 silly resolved     version: '0.0.3',
364 silly resolved     description: 'Find JAVA_HOME on any system',
364 silly resolved     main: 'index.js',
364 silly resolved     scripts: { test: 'echo "Error: no test specified" && exit 1' },
364 silly resolved     repository:
364 silly resolved      { type: 'git',
364 silly resolved        url: 'https://github.com/jsdevel/node-find-java-home.git' },
364 silly resolved     dependencies: { 'find-in-path': '' },
364 silly resolved     keywords: [ 'JAVA_HOME', 'find', 'java', 'home' ],
364 silly resolved     author: { name: 'Joseph Spencer' },
364 silly resolved     license: 'Apache 2.0',
364 silly resolved     bugs: { url: 'https://github.com/jsdevel/node-find-java-home/issues' },
364 silly resolved     homepage: 'https://github.com/jsdevel/node-find-java-home',
364 silly resolved     readme: '#node-find-java-home\n\nReturns the location of JAVA_HOME as an absolute path on windows, mac, and \nlinux.  It runs asynchronously.\n\n##Algorithm\n1. This module will first attempt to check for JAVA_HOME.  If that\'s set it\nsimply returns that value.  \n2. On windows the registry is queried.\n3. If neither of the previous methods worked, then the PATH is scanned for javac\n4. On mac, the parent directory of javac is checked for a java_home binary.  If that binary exists then it is executed and the result is used\n5. The grandparent directory of javac is used.  This is similar to `$(dirname $(dirname $(readlink `which javac`)))`\n\n##Example\n````javascript\nrequire(\'./\')(function(err, home){\n  if(err)return console.log(err);\n  console.log(home);\n});\n````\n\n##License\n````\nCopyright 2013 Joseph Spencer.\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n````\n',
364 silly resolved     readmeFilename: 'README.md',
364 silly resolved     _id: 'find-java-home@0.0.3',
364 silly resolved     _from: 'find-java-home@0.0.3' } ]
365 info install find-java-home@0.0.3 into /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java
366 info installOne find-java-home@0.0.3
367 info /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home unbuild
368 verbose tar unpack /Users/pfreitas/.npm/find-java-home/0.0.3/package.tgz
369 silly lockFile 2b36b5e6-java-node-modules-find-java-home tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home
370 verbose lock tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home /Users/pfreitas/.npm/2b36b5e6-java-node-modules-find-java-home.lock
371 silly lockFile f4cb5b2f-find-java-home-0-0-3-package-tgz tar:///Users/pfreitas/.npm/find-java-home/0.0.3/package.tgz
372 verbose lock tar:///Users/pfreitas/.npm/find-java-home/0.0.3/package.tgz /Users/pfreitas/.npm/f4cb5b2f-find-java-home-0-0-3-package-tgz.lock
373 silly gunzTarPerm modes [ '755', '644' ]
374 silly gunzTarPerm extractEntry package.json
375 silly gunzTarPerm extractEntry .npmignore
376 silly gunzTarPerm extractEntry README.md
377 silly gunzTarPerm extractEntry LICENSE
378 silly gunzTarPerm extractEntry index.js
379 silly gunzTarPerm extractEntry test.js
380 silly lockFile 2b36b5e6-java-node-modules-find-java-home tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home
381 silly lockFile 2b36b5e6-java-node-modules-find-java-home tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home
382 silly lockFile f4cb5b2f-find-java-home-0-0-3-package-tgz tar:///Users/pfreitas/.npm/find-java-home/0.0.3/package.tgz
383 silly lockFile f4cb5b2f-find-java-home-0-0-3-package-tgz tar:///Users/pfreitas/.npm/find-java-home/0.0.3/package.tgz
384 info preinstall find-java-home@0.0.3
385 verbose readDependencies using package.json deps
386 verbose readDependencies using package.json deps
387 verbose cache add [ 'find-in-path@', null ]
388 verbose cache add name=undefined spec="find-in-path@" args=["find-in-path@",null]
389 verbose parsed url { protocol: null,
389 verbose parsed url   slashes: null,
389 verbose parsed url   auth: null,
389 verbose parsed url   host: null,
389 verbose parsed url   port: null,
389 verbose parsed url   hostname: null,
389 verbose parsed url   hash: null,
389 verbose parsed url   search: null,
389 verbose parsed url   query: null,
389 verbose parsed url   pathname: 'find-in-path@',
389 verbose parsed url   path: 'find-in-path@',
389 verbose parsed url   href: 'find-in-path@' }
390 verbose cache add name="find-in-path" spec="" args=["find-in-path",""]
391 verbose parsed url { protocol: null,
391 verbose parsed url   slashes: null,
391 verbose parsed url   auth: null,
391 verbose parsed url   host: null,
391 verbose parsed url   port: null,
391 verbose parsed url   hostname: null,
391 verbose parsed url   hash: null,
391 verbose parsed url   search: null,
391 verbose parsed url   query: null,
391 verbose parsed url   pathname: null,
391 verbose parsed url   path: null,
391 verbose parsed url   href: '' }
392 verbose addNamed [ 'find-in-path', '' ]
393 verbose addNamed [ null, '*' ]
394 silly lockFile be041f9c-find-in-path find-in-path@
395 verbose lock find-in-path@ /Users/pfreitas/.npm/be041f9c-find-in-path.lock
396 silly addNameRange { name: 'find-in-path', range: '*', hasData: false }
397 verbose url raw find-in-path
398 verbose url resolving [ 'https://registry.npmjs.org/', './find-in-path' ]
399 verbose url resolved https://registry.npmjs.org/find-in-path
400 info trying registry request attempt 1 at 20:56:55
401 verbose etag "D0QTTHBXJODHWJRHD6UUUZJUP"
402 http GET https://registry.npmjs.org/find-in-path
403 http 304 https://registry.npmjs.org/find-in-path
404 silly registry.get cb [ 304,
404 silly registry.get   { date: 'Thu, 06 Feb 2014 22:56:54 GMT',
404 silly registry.get     server: 'Apache',
404 silly registry.get     connection: 'Keep-Alive',
404 silly registry.get     'keep-alive': 'timeout=10, max=50',
404 silly registry.get     etag: '"D0QTTHBXJODHWJRHD6UUUZJUP"',
404 silly registry.get     'cache-control': 'max-age=1',
404 silly registry.get     vary: 'Accept' } ]
405 verbose etag find-in-path from cache
406 silly addNameRange number 2 { name: 'find-in-path', range: '*', hasData: true }
407 silly addNameRange versions [ 'find-in-path', [ '0.0.0', '0.0.1' ] ]
408 verbose addNamed [ 'find-in-path', '0.0.1' ]
409 verbose addNamed [ '0.0.1', '0.0.1' ]
410 silly lockFile bbeae006-find-in-path-0-0-1 find-in-path@0.0.1
411 verbose lock find-in-path@0.0.1 /Users/pfreitas/.npm/bbeae006-find-in-path-0-0-1.lock
412 silly lockFile bbeae006-find-in-path-0-0-1 find-in-path@0.0.1
413 silly lockFile bbeae006-find-in-path-0-0-1 find-in-path@0.0.1
414 silly lockFile be041f9c-find-in-path find-in-path@
415 silly lockFile be041f9c-find-in-path find-in-path@
416 silly resolved [ { name: 'find-in-path',
416 silly resolved     version: '0.0.1',
416 silly resolved     description: 'Find a directory or file from the PATH and return the absolute path.',
416 silly resolved     main: 'find-in-path.js',
416 silly resolved     scripts: { test: 'echo "Error: no test specified" && exit 1' },
416 silly resolved     repository:
416 silly resolved      { type: 'git',
416 silly resolved        url: 'https://github.com/jsdevel/node-find-in-path.git' },
416 silly resolved     keywords: [ 'find', 'path' ],
416 silly resolved     author: { name: 'Joseph Spencer' },
416 silly resolved     license: 'APACHE 2.0',
416 silly resolved     bugs: { url: 'https://github.com/jsdevel/node-find-in-path/issues' },
416 silly resolved     readme: '#node-find-in-path\n\nFind a directory or file in your path.\n\n##Example\n````javascript\nvar mod = require(\'./find-in-path\');\n\nmod(\'netstat\', function(err, path){\n   console.log(err);\n   console.log(path);\n});\n````\n\nPrints `/bin/netstat` on linux;\n\n##License\n````\nCopyright 2013 Joseph Spencer.\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n````\n',
416 silly resolved     readmeFilename: 'README.md',
416 silly resolved     homepage: 'https://github.com/jsdevel/node-find-in-path',
416 silly resolved     _id: 'find-in-path@0.0.1',
416 silly resolved     _from: 'find-in-path@' } ]
417 info install find-in-path@0.0.1 into /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home
418 info installOne find-in-path@0.0.1
419 info /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home/node_modules/find-in-path unbuild
420 verbose tar unpack /Users/pfreitas/.npm/find-in-path/0.0.1/package.tgz
421 silly lockFile df2915fa-a-home-node-modules-find-in-path tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home/node_modules/find-in-path
422 verbose lock tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home/node_modules/find-in-path /Users/pfreitas/.npm/df2915fa-a-home-node-modules-find-in-path.lock
423 silly lockFile 375aef11-m-find-in-path-0-0-1-package-tgz tar:///Users/pfreitas/.npm/find-in-path/0.0.1/package.tgz
424 verbose lock tar:///Users/pfreitas/.npm/find-in-path/0.0.1/package.tgz /Users/pfreitas/.npm/375aef11-m-find-in-path-0-0-1-package-tgz.lock
425 silly gunzTarPerm modes [ '755', '644' ]
426 silly gunzTarPerm extractEntry package.json
427 silly gunzTarPerm extractEntry README.md
428 silly gunzTarPerm extractEntry LICENSE
429 silly gunzTarPerm extractEntry find-in-path.js
430 silly gunzTarPerm extractEntry test.js
431 silly lockFile df2915fa-a-home-node-modules-find-in-path tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home/node_modules/find-in-path
432 silly lockFile df2915fa-a-home-node-modules-find-in-path tar:///Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home/node_modules/find-in-path
433 silly lockFile 375aef11-m-find-in-path-0-0-1-package-tgz tar:///Users/pfreitas/.npm/find-in-path/0.0.1/package.tgz
434 silly lockFile 375aef11-m-find-in-path-0-0-1-package-tgz tar:///Users/pfreitas/.npm/find-in-path/0.0.1/package.tgz
435 info preinstall find-in-path@0.0.1
436 verbose readDependencies using package.json deps
437 verbose readDependencies using package.json deps
438 silly resolved []
439 verbose about to build /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home/node_modules/find-in-path
440 info build /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home/node_modules/find-in-path
441 verbose linkStuff [ false,
441 verbose linkStuff   false,
441 verbose linkStuff   false,
441 verbose linkStuff   '/Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home/node_modules' ]
442 info linkStuff find-in-path@0.0.1
443 verbose linkBins find-in-path@0.0.1
444 verbose linkMans find-in-path@0.0.1
445 verbose rebuildBundles find-in-path@0.0.1
446 info install find-in-path@0.0.1
447 info postinstall find-in-path@0.0.1
448 verbose about to build /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home
449 info build /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules/find-java-home
450 verbose linkStuff [ false,
450 verbose linkStuff   false,
450 verbose linkStuff   false,
450 verbose linkStuff   '/Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java/node_modules' ]
451 info linkStuff find-java-home@0.0.3
452 verbose linkBins find-java-home@0.0.3
453 verbose linkMans find-java-home@0.0.3
454 verbose rebuildBundles find-java-home@0.0.3
455 verbose rebuildBundles [ 'find-in-path' ]
456 info install find-java-home@0.0.3
457 info postinstall find-java-home@0.0.3
458 verbose about to build /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java
459 info build /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/java
460 verbose linkStuff [ false,
460 verbose linkStuff   false,
460 verbose linkStuff   false,
460 verbose linkStuff   '/Volumes/MacintoshHD2/dev/node/rabbit/node_modules' ]
461 info linkStuff java@0.3.0
462 verbose linkBins java@0.3.0
463 verbose linkMans java@0.3.0
464 verbose rebuildBundles java@0.3.0
465 verbose rebuildBundles [ 'find-java-home' ]
466 info install java@0.3.0
467 info java@0.2.9 Failed to exec install script
468 info /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules/java unbuild
469 info preuninstall java@0.2.9
470 verbose unsafe-perm in lifecycle true
471 info uninstall java@0.2.9
472 verbose false,/Volumes/MacintoshHD2/dev/node/rabbit/node_modules,/Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx/node_modules unbuild java@0.2.9
473 info postuninstall java@0.2.9
474 verbose about to build /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx
475 info /Volumes/MacintoshHD2/dev/node/rabbit/node_modules/jmx unbuild
476 info preuninstall jmx@0.2.1
477 info uninstall jmx@0.2.1
478 verbose true,/Volumes/MacintoshHD2/dev/node/rabbit/node_modules,/Volumes/MacintoshHD2/dev/node/rabbit/node_modules unbuild jmx@0.2.1
479 info postuninstall jmx@0.2.1
480 error java@0.2.9 install: `node-gyp rebuild`
480 error Exit status 1
481 error Failed at the java@0.2.9 install script.
481 error This is most likely a problem with the java package,
481 error not with npm itself.
481 error Tell the author that this fails on your system:
481 error     node-gyp rebuild
481 error You can get their info via:
481 error     npm owner ls java
481 error There is likely additional logging output above.
482 error System Darwin 13.0.0
483 error command "node" "/usr/local/bin/npm" "install"
484 error cwd /Volumes/MacintoshHD2/dev/node/rabbit
485 error node -v v0.10.24
486 error npm -v 1.3.21
487 error code ELIFECYCLE
488 verbose exit [ 1, true ]
